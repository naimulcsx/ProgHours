// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  DEMO
  REGULAR
  MENTOR
  ADMIN
}

enum Verdict {
  AC
  WA
  TLE
}

model User {
  id        Int      @id @default(autoincrement())
  fullName  String   @map("full_name")
  email     String   @unique
  username  String   @unique
  password  String
  phone     String?
  role      Role     @default(REGULAR)
  lastSeen  DateTime @default(now()) @map("last_seen") @db.Timestamptz()
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()
  metaData  Json?    @default("{}") @map("metadata")

  submissions Submission[]
  UserHandle  UserHandle[]
  PullHistory PullHistory[]

  @@map("users")
}

model Problem {
  id              Int               @id @default(autoincrement())
  pid             String            @unique
  name            String
  url             String            @unique
  difficulty      Int
  createdAt       DateTime          @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt       DateTime          @updatedAt @map("updated_at") @db.Timestamptz()
  metaData        Json?             @default("{}") @map("metadata")
  problemTags     ProblemTag[]
  submissions     Submission[]
  PullHistoryItem PullHistoryItem[]

  @@map("problems")
}

model Tag {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  problemTags ProblemTag[]

  @@map("tags")
}

model ProblemTag {
  problemId Int @map("problem_id")
  tagId     Int @map("tag_id")

  tag     Tag     @relation(fields: [tagId], references: [id])
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@id([problemId, tagId])
  @@map("problem_tags")
}

model Submission {
  id        Int      @id @default(autoincrement())
  solveTime Int      @map("solve_time")
  verdict   Verdict
  solvedAt  DateTime @map("solved_at") @db.Date
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()
  userId    Int      @map("user_id")
  problemId Int      @map("problem_id")
  metaData  Json?    @default("{}") @map("metadata")

  user    User    @relation(fields: [userId], references: [id])
  problem Problem @relation(fields: [problemId], references: [id])

  @@unique([userId, problemId])
  @@index(solvedAt)
  @@map("submissions")
}

enum HandleType {
  CODEFORCES
  CODECHEF
  SPOJ
  ATCODER
  GITHUB
}

model UserHandle {
  id     String     @id @default(cuid())
  user   User       @relation(fields: [userId], references: [id])
  userId Int        @map("user_id")
  type   HandleType
  handle String

  @@map("user_handles")
}

enum PullHistoryStatus {
  PENDING // the pull history has been created
  STARTED // the job is started, totalItems is available
  OK // all items has been fetched
  ERROR // failed
}

model PullHistory {
  id             String            @id @default(cuid())
  user           User              @relation(fields: [userId], references: [id])
  userId         Int               @map("user_id")
  status         PullHistoryStatus @default(PENDING)
  totalCompleted Int               @default(0) @map("total_completed")
  totalItems     Int               @default(0) @map("total_items")
  items          PullHistoryItem[]
  createdAt      DateTime          @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt      DateTime          @updatedAt @map("updated_at") @db.Timestamptz()
  processingTime BigInt            @default(0) @map("processing_time")

  @@map("pull_histories")
}

model PullHistoryItem {
  id             Int               @id @default(autoincrement())
  problem        Problem?          @relation(fields: [problemId], references: [id])
  problemId      Int?              @map("problem_id")
  problemUrl     String            @map("problem_url")
  status         PullHistoryStatus @default(PENDING)
  processingTime BigInt            @default(0) @map("processing_time")
  pullHistory    PullHistory       @relation(fields: [pullHistoryId], references: [id], onDelete: Cascade)
  pullHistoryId  String            @map("pull_history_id")
  createdAt      DateTime          @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt      DateTime          @updatedAt @map("updated_at") @db.Timestamptz()

  @@index([pullHistoryId])
  @@map("pull_history_items")
}
